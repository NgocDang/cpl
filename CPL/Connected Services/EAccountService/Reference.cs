//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EAccountService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountSetting", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountSetting : object
    {
        
        private EAccountService.Environment EnvironmentField;
        
        private EAccountService.Platform PlatformField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Environment Environment
        {
            get
            {
                return this.EnvironmentField;
            }
            set
            {
                this.EnvironmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Platform Platform
        {
            get
            {
                return this.PlatformField;
            }
            set
            {
                this.PlatformField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Environment", Namespace="http://schemas.datacontract.org/2004/07/FHCore.API.Core")]
    public enum Environment : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PRIVATENET = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MAINNET = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TESTNET = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Platform", Namespace="http://schemas.datacontract.org/2004/07/FHCore.API.Core")]
    public enum Platform : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BTC = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NEO = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ETH = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountSetResult", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountSetResult : object
    {
        
        private EAccountService.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Misc")]
    public partial class Status : object
    {
        
        private int CodeField;
        
        private string TextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                this.CodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text
        {
            get
            {
                return this.TextField;
            }
            set
            {
                this.TextField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountCreateResult", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountCreateResult : object
    {
        
        private string AddressField;
        
        private EAccountService.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountTransferResult", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountTransferResult : object
    {
        
        private EAccountService.Status StatusField;
        
        private string TxIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TxId
        {
            get
            {
                return this.TxIdField;
            }
            set
            {
                this.TxIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountTransferByMnemonicResult", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountTransferByMnemonicResult : object
    {
        
        private EAccountService.Status StatusField;
        
        private string[] TxIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TxId
        {
            get
            {
                return this.TxIdField;
            }
            set
            {
                this.TxIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountBalanceResult", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountBalanceResult : object
    {
        
        private decimal BalanceField;
        
        private EAccountService.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance
        {
            get
            {
                return this.BalanceField;
            }
            set
            {
                this.BalanceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountTokenBalanceResult", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountTokenBalanceResult : object
    {
        
        private decimal BalanceField;
        
        private EAccountService.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance
        {
            get
            {
                return this.BalanceField;
            }
            set
            {
                this.BalanceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EAccountTokenBalancesResult", Namespace="http://schemas.datacontract.org/2004/07/FHCore.WCF.Account")]
    public partial class EAccountTokenBalancesResult : object
    {
        
        private decimal[] BalancesField;
        
        private EAccountService.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal[] Balances
        {
            get
            {
                return this.BalancesField;
            }
            set
            {
                this.BalancesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EAccountService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EAccountService.IEAccount")]
    public interface IEAccount
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/Set", ReplyAction="http://tempuri.org/IEAccount/SetResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountSetResult> SetAsync(string authenticatedToken, EAccountService.EAccountSetting setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/CreateAddress", ReplyAction="http://tempuri.org/IEAccount/CreateAddressResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountCreateResult> CreateAddressAsync(string authenticatedToken, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/Transfer", ReplyAction="http://tempuri.org/IEAccount/TransferResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferAsync(string authenticatedToken, string fromAddress, string fromPassword, string toAddress, decimal value, int durationInSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/TransferByPrivateKey", ReplyAction="http://tempuri.org/IEAccount/TransferByPrivateKeyResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferByPrivateKeyAsync(string authenticatedToken, string fromPrivateKey, string toAddress, decimal value, int durationInSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/TransferByKeystore", ReplyAction="http://tempuri.org/IEAccount/TransferByKeystoreResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferByKeystoreAsync(string authenticatedToken, string fromKeystoreInJson, string fromPassword, string toAddress, decimal value, int durationInSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/TransferByMnemonic", ReplyAction="http://tempuri.org/IEAccount/TransferByMnemonicResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTransferByMnemonicResult> TransferByMnemonicAsync(string authenticatedToken, string fromMnemonic, string listIndexs, string toAddress, int durationInSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/GetBalance", ReplyAction="http://tempuri.org/IEAccount/GetBalanceResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountBalanceResult> GetBalanceAsync(string authenticatedToken, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/GetTokenBalance", ReplyAction="http://tempuri.org/IEAccount/GetTokenBalanceResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTokenBalanceResult> GetTokenBalanceAsync(string authenticatedToken, string address, string tokenSmartContractAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/GetTokenBalances", ReplyAction="http://tempuri.org/IEAccount/GetTokenBalancesResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTokenBalancesResult> GetTokenBalancesAsync(string authenticatedToken, string address, string[] lstTokenSmartContractAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/TransferToken", ReplyAction="http://tempuri.org/IEAccount/TransferTokenResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferTokenAsync(string authenticatedToken, string fromAddress, string fromPassword, string toAddress, decimal value, string tokenSmartContractAddress, int durationInSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEAccount/TransferTokenByPrivateKey", ReplyAction="http://tempuri.org/IEAccount/TransferTokenByPrivateKeyResponse")]
        System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferTokenByPrivateKeyAsync(string authenticatedToken, string fromPrivateKey, string toAddress, decimal value, string tokenSmartContractAddress, int durationInSeconds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IEAccountChannel : EAccountService.IEAccount, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class EAccountClient : System.ServiceModel.ClientBase<EAccountService.IEAccount>, EAccountService.IEAccount
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public EAccountClient() : 
                base(EAccountClient.GetDefaultBinding(), EAccountClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IEAccount.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EAccountClient(EndpointConfiguration endpointConfiguration) : 
                base(EAccountClient.GetBindingForEndpoint(endpointConfiguration), EAccountClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EAccountClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(EAccountClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EAccountClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(EAccountClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EAccountClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountSetResult> SetAsync(string authenticatedToken, EAccountService.EAccountSetting setting)
        {
            return base.Channel.SetAsync(authenticatedToken, setting);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountCreateResult> CreateAddressAsync(string authenticatedToken, string password)
        {
            return base.Channel.CreateAddressAsync(authenticatedToken, password);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferAsync(string authenticatedToken, string fromAddress, string fromPassword, string toAddress, decimal value, int durationInSeconds)
        {
            return base.Channel.TransferAsync(authenticatedToken, fromAddress, fromPassword, toAddress, value, durationInSeconds);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferByPrivateKeyAsync(string authenticatedToken, string fromPrivateKey, string toAddress, decimal value, int durationInSeconds)
        {
            return base.Channel.TransferByPrivateKeyAsync(authenticatedToken, fromPrivateKey, toAddress, value, durationInSeconds);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferByKeystoreAsync(string authenticatedToken, string fromKeystoreInJson, string fromPassword, string toAddress, decimal value, int durationInSeconds)
        {
            return base.Channel.TransferByKeystoreAsync(authenticatedToken, fromKeystoreInJson, fromPassword, toAddress, value, durationInSeconds);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTransferByMnemonicResult> TransferByMnemonicAsync(string authenticatedToken, string fromMnemonic, string listIndexs, string toAddress, int durationInSeconds)
        {
            return base.Channel.TransferByMnemonicAsync(authenticatedToken, fromMnemonic, listIndexs, toAddress, durationInSeconds);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountBalanceResult> GetBalanceAsync(string authenticatedToken, string address)
        {
            return base.Channel.GetBalanceAsync(authenticatedToken, address);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTokenBalanceResult> GetTokenBalanceAsync(string authenticatedToken, string address, string tokenSmartContractAddress)
        {
            return base.Channel.GetTokenBalanceAsync(authenticatedToken, address, tokenSmartContractAddress);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTokenBalancesResult> GetTokenBalancesAsync(string authenticatedToken, string address, string[] lstTokenSmartContractAddress)
        {
            return base.Channel.GetTokenBalancesAsync(authenticatedToken, address, lstTokenSmartContractAddress);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferTokenAsync(string authenticatedToken, string fromAddress, string fromPassword, string toAddress, decimal value, string tokenSmartContractAddress, int durationInSeconds)
        {
            return base.Channel.TransferTokenAsync(authenticatedToken, fromAddress, fromPassword, toAddress, value, tokenSmartContractAddress, durationInSeconds);
        }
        
        public System.Threading.Tasks.Task<EAccountService.EAccountTransferResult> TransferTokenByPrivateKeyAsync(string authenticatedToken, string fromPrivateKey, string toAddress, decimal value, string tokenSmartContractAddress, int durationInSeconds)
        {
            return base.Channel.TransferTokenByPrivateKeyAsync(authenticatedToken, fromPrivateKey, toAddress, value, tokenSmartContractAddress, durationInSeconds);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEAccount))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEAccount))
            {
                return new System.ServiceModel.EndpointAddress("http://api.famhopperchain.com/Account/EAccount.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return EAccountClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IEAccount);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return EAccountClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IEAccount);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IEAccount,
        }
    }
}
